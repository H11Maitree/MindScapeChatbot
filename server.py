import os
import random
import json
from flask import Flask, request, jsonify, render_template
from langdetect import detect, LangDetectException
import openai

from knowledge_engine import get_answer_from_knowledge

# ‚îÄ‚îÄ‚îÄ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏à‡∏≤‡∏Å ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á ENV var ‡∏ä‡∏∑‡πà‡∏≠ OPENAI_API_KEY (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î)
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise RuntimeError("OPENAI_API_KEY")

# ‚îÄ‚îÄ‚îÄ Few-shot Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Classification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CLASSIFY_PROMPT = """
You are a classifier.  Classify the user request into exactly one of these 4 categories:
1) GREETING         (e.g. hi, ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, hello)
2) DHAMMA_TOPIC     (questions about Buddhist teachings, topics, keywords)
3) EMOTIONAL_SUPPORT (life or emotional problems seeking encouragement or listening)
4) OTHER            (all other topics: cooking, tech support, travel tips, recipes, etc.)

Only return the single word: GREETING, DHAMMA_TOPIC, EMOTIONAL_SUPPORT, or OTHER
(with no extra text).
"""

# ‚îÄ‚îÄ‚îÄ Pool ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ (‡∏™‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GREETINGS = {
    "th": [
        "‡πÄ‡∏Æ‡πâ‡∏¢ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡πÉ‡∏à‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏±‡πâ‡∏¢?",
        "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ‡∏à‡πâ‡∏≤! ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏£‡∏£‡∏°‡∏∞‡∏ä‡∏¥‡∏• ‡πÜ ‡∏Å‡∏±‡∏ô~",
        "‡πÑ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏∞‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°?"
    ],
    "en": [
        "Hey there! How‚Äôs it going today? üòä Anything on your mind you‚Äôd like to share?",
        "Hi friend! Feeling up or down? Let‚Äôs chat‚Äîhappy to lend an ear and some positive Dhamma vibes.",
        "Yo! What‚Äôs on your heart today? I‚Äôm here to listen and sprinkle some uplifting Buddhist wisdom."
    ]
}

# ‚îÄ‚îÄ‚îÄ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏£‡∏ì‡∏µ OTHER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DENIAL = {
    "th": "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞ ‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï-‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ üôè",
    "en": "Sorry, I only discuss Dhamma topics or offer emotional support. üòä"
}

# ‚îÄ‚îÄ‚îÄ System prompts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ChatCompletion ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SYSTEM_SUPPORT = {
    "th": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å‡∏™‡∏≤‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏∞ ‡∏ä‡∏¥‡∏• ‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à",
    "en": "You are a laid-back Dhamma buddy who listens warmly, offers emotional support, and cites Buddhist teachings."
}
SYSTEM_DHAMMA = {
    "th": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏∞ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏ò‡∏£‡∏£‡∏°‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å knowledge base ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢",
    "en": "You are an expert in Buddhist Dhamma, explaining topics clearly based on the provided knowledge snippets."
}

# ‚îÄ‚îÄ‚îÄ Flask App Setup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)

def detect_lang(text: str) -> str:
    """Detect language code 'th' or 'en'"""
    try:
        return "th" if detect(text) == "th" else "en"
    except LangDetectException:
        return "th"

def classify_request(user_msg: str) -> str:
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ OpenAI ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏Å‡∏£‡∏ì‡∏µ"""
    resp = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": CLASSIFY_PROMPT},
            {"role": "user",   "content": user_msg}
        ],
        temperature=0
    )
    return resp.choices[0].message.content.strip().upper()

@app.route("/", methods=["GET"])
def index():
    return render_template("Chatbot.html")

@app.route("/chat", methods=["POST"])
def chat():
    payload      = request.get_json()
    user_message = payload.get("message", "").strip()
    history      = payload.get("history", [])   # [{"role":"user"/"assistant","content":...}, ...]
    lang         = detect_lang(user_message)

    # 1) Classification
    category = classify_request(user_message)

    # 2) GREETING ‚Üí ‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å GREETINGS
    if category == "GREETING":
        reply = random.choice(GREETINGS.get(lang, GREETINGS["en"]))
        return jsonify({"reply": reply})

    # 3) OTHER ‚Üí ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    if category == "OTHER":
        return jsonify({"reply": DENIAL.get(lang)})

    # 4) DHAMMA_TOPIC ‚Üí ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å knowledge base ‡πÅ‡∏•‡πâ‡∏ß refine ‡∏ú‡πà‡∏≤‡∏ô OpenAI
    if category == "DHAMMA_TOPIC":
        raw = get_answer_from_knowledge(user_message)

        # ‚îÄ‚îÄ‚îÄ ‡πÅ‡∏õ‡∏•‡∏á raw ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏°‡∏≠ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if isinstance(raw, dict):
            snippet = raw.get("content", "")
        else:
            snippet = str(raw)

        # ‡∏ñ‡πâ‡∏≤ snippet ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not snippet:
            return jsonify({"reply": {
                "th": "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏∞‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ü§ç",
                "en": "Sorry, I don't have Dhamma material on that topic yet ü§ç"
            }[lang]})

        # ‡∏™‡πà‡∏á snippet + ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á refine ‡πÑ‡∏õ‡πÉ‡∏´‡πâ OpenAI ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏•
        refine = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_DHAMMA[lang]},
                {"role": "user",   "content": snippet},
                {"role": "user",   "content": f"‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ: {user_message}"}
            ],
            temperature=0.7
        )
        return jsonify({"reply": refine.choices[0].message.content.strip()})

    # 5) EMOTIONAL_SUPPORT ‚Üí ‡∏™‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° history
    if category == "EMOTIONAL_SUPPORT":
        messages = [{"role":"system","content":SYSTEM_SUPPORT[lang]}] + history
        messages.append({"role":"user","content":user_message})
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.8
        )
        return jsonify({"reply": resp.choices[0].message.content.strip()})

    # Safety net
    return jsonify({"reply": DENIAL.get(lang)}), 400

if __name__ == "__main__":
    app.run(debug=True, port=5000)
